=============================================================
Analysis from SPU DRAM adress bus with logic analyzer.

				Mostly done by Laxer3a.
				Data provided & help/support by ElectronAsh.
=============================================================

0. At first :
-------------------------------------------------------------
	It seems logical that,
	- given the 44100 Hz speed of producting samples.
	- given that the CPU 33.8 Mhz clock of the PSX gives exactly 768 cycles per sample for the whole system.
	- given that there are 24 channels + reverb + write back of channel 1 and 3.
	- given that the CPU/DMA must be able to upload data without disturbing the playback.
	
	=> There was probably a fixed timed slot for each piece of work.
	=> Unused setup just 'run', data is just 'nullified' somewhere in the data pipeline.
	=> CD Write most likely occurs all the time but are just nullified too.
	=> Reverb probably work all the time, just ignored when not used.

	= State machine still does the work at the same timing for everything.

	An initial estimate (ignoring CD / write back and reverb) gives :
	
	A 32 cycles budget per channel = 768 / 24
	
	Obviously, it is lower per channel, the remaining budget given to the other things.
	
	Note that while the budget is 32/24 cycle per channel, we need to divide by TWO because
	we need to process LEFT and RIGHT channel.
	So some part of the system actually have half time to do the work.
	
	There is also the issue of WHEN can the CPU/DMA upload things to the chip while it does not stop playing.
	Obviously, it can not be a priority thing, and if we want to keep the state machine simple,
	there are time slot for SPU work and slot for memory update.
	
	Spec from No$PSX, adapted from 8 byte adress to 16 bit word adress (shift >> 1)
	Adress as 16 bit word :
		00000h-001FFh  CD Audio left  (1Kbyte) ;\CD Audio before Volume processing
		00200h-003FFh  CD Audio right (1Kbyte) ;/signed 16bit samples at 44.1kHz
		00400h-005FFh  Voice 1 mono   (1Kbyte) ;\Voice 1 and 3 after ADSR processing
		00600h-007FFh  Voice 3 mono   (1Kbyte) ;/signed 16bit samples at 44.1kHz	
		00800h-03FFFh  ADPCM / REVERB Area
		
1. Grabbed raw data from a PSX motherboard (solder, connect, sample BIOS audio boot)
-------------------------------------------------------------
	A huge thanks to ElectronAsh for doing the hardwork.
	A key stone for this analysis.
	Provided a sample of raw data of around 300,000 cycles 
	during the playstation BIOS boot when audio is used. (near 8ms of data)
	
2. Reexported the data from raw siggrok capture data to VCD format,
-------------------------------------------------------------
   then wrote a parser simulating the SDRAM access pattern (RAS/CAS).
   Started to differentiate the read/write and full adresses.
   Little struggle because was comparing stupid byte vs word adress,
   but also because looking at adresses at first looked random.
   Or I was expecting more 'linear patterns'...
   
3. Modifed Avocado emulator and dumped the BIOS boot SPU ADPCM read pattern.
-------------------------------------------------------------
	Wanted to find which channels were active, what the ADPCM block setup was.
	Did find out what channel were used...
	But in the end did not help that much.
	
4. Managed to seperate read and write, look at them with EXCEL (made a graph)
-------------------------------------------------------------
	Basically trying to get a heatmap of the memory usage.

5. Modified importer to export propert clock cycles instead of nanoseconds.
-------------------------------------------------------------
	Annotated correctly based on the addresses too. (READ/WRITE or ADPCM/CD/VOICE)

6. Finally have now a proper block for 768 cycles that looks like this :
-------------------------------------------------------------

IMPORTANT NOTE :	I do not know HOW we cut in the 768 cycle pattern.
					We just do know that there is the 24 channels to compute.
					That there is 4 write due to Voice1/3 + CD L/R channel.
					That Reverb work is also done.
					
					But in which order really does not matter much.
					The only order that matters is :
					1/ Write of channel 1 and 3 must obviously occurs after the channel
					has been computed.
					2/ Most likely reverb does work after all channels are done.
						So it is probably the 24 channels
						Then writes for CD and Channel 1/3
						Then reverb.
						
	Please look at the end for the remaining questions :

We also analyzed the voice 1..4 used during boot, and by knowing the VOICE Sample rate for each voice,
we can look at how the ADPCM decoder is changing of adress (less change = slow play speed, high change = fast play speed)
	
Format :
@4666 LOAD COL 119 => Adr 000b19 READ ADPCM
  |     |       |            |     +------  READ / WRITE and ADPCM / REVERB or other work categorized by ADDRESS.
  |     |       |            +------------ 	Complete adress from RAS/CAS setup
  |     |       +------------------------- 	9 bit value
  |     +---------------------------------  LOAD COLUMN : After ROW adress of 9 bit is setup,
  |                                         adress of 9 bit for COLUMN create a full adress.
  +---------------------------------------  Cycle number in the sample log.

Our log start at cycle 4850 from the Logic Analyzer data
  
====================================
    44.100 Khz Sample (768 clocks).
====================================

// Voice 1
@4850 LOAD COL 120 => Adr 005b20 READ ADPCM Read 16 bit...							<-- HEADER OF ADPCM BLOCK USED
	We notice that the first line in each block of 3 is ALWAYS a multiple of 16 ! ADPCM BLOCK HEADER.
@4858 LOAD COL 125 => Adr 005b25 READ ADPCM Then +10 byte next read. (5 half word)	<-- 16 bit Block 0..6 of ADPCM block to get sample from. 
@4866 LOAD COL 30  => Adr 005c30 XXXX DATA											<-- Use for Data XFer (UNUSED READ if no transfer, READ for FIFO out, WRITE for FIFO in)

// Special stuff -----------------------------------
@4874 LOAD COL b3 => Adr 0000b3 WRITE [CD LEFT]
@4882 LOAD COL b3 => Adr 0002b3 WRITE [CD RIGHT]
@4890 LOAD COL b3 => Adr 0004b3 WRITE [VOICE 1]
@4898 LOAD COL b3 => Adr 0006b3 WRITE [VOICE 3]
//--------------------------------------------------

====================================
    22.050 Khz REVERB SPEED.(44.1 Khz Left, then Right)
====================================
// Reverb Stuff-------------------------------------
Lower Limit is 384A0
High  Limit is 40000
A => 2nd read and 1st write is ADR-1 and ADR : mLSAME or mRSAME.
B => mLSAME-mLDIFF = 0x4740 byte. (Know from BIOS register setup)
	 mRSAME-mRDIFF = 0x4EE0 byte.
   
	 (m*Same - m*Diff) in word *2 = 0x4740
	 Conclusion we are on the [LEFT SIDE]
C => Compute offset (Reverb increment buffer)
	 Write mLSAME 03e32b(word) 
		= mLSAME(0x0000f6b0 in byte = 7B58 word from BIOS setup) + Counter word + Base (384A0 word)
		= 0x3FFF8 (mLSAME + Base) + Counter Word
		= 8 count to 0x40000 + 0x5E8B (0x3E32B-0x384A0)
	Offset = 0x5E93 over a range of [0..7B5F]
D => Now that we know the offset and the BIOS setup, remapping back all the read/write to registers
	 And find out the original state machine order using No$ reverb computations.

@clock                                          Found Reverb Setup Read/Write
												[Left Side]		[Right Side]
@4906 LOAD COL 9b  = > Adr 03d09b READ REVERB   dLSame			dRSame
@4914 LOAD COL 12a = > Adr 03e32a READ REVERB   mLSame-1 		mRSame-1
@4922 LOAD COL 157 = > Adr 039357 READ REVERB   dRDiff			dLDiff
@4930 LOAD COL 12b = > Adr 03e32b XXXX REVERB   mLSame			mRSame          <-- WRITE becomes READ if REVERB DISABLED.
@4938 LOAD COL 18a = > Adr 03bf8a READ REVERB   mLDiff-1		mRDiff-1
@4946 LOAD COL 23  = > Adr 03dc23 READ REVERB   mLComb1			mRComb1
@4954 LOAD COL 18b = > Adr 03bf8b XXXX REVERB   mLDiff			mRDiff          <-- WRITE becomes READ if REVERB DISABLED.
@4962 LOAD COL db  = > Adr 03d6db READ REVERB	mLComb2			mRComb2
@4970 LOAD COL a3  = > Adr 03b4a3 READ REVERB	mLComb3			mRComb3
@4978 LOAD COL 1ab = > Adr 03afab READ REVERB	mLComb4			mRComb4
@4986 LOAD COL 5f  = > Adr 03865f READ REVERB	mLAPF1 - dAPF1	mRAPF1 - dAPF1
@4994 LOAD COL 1ff = > Adr 03ebff READ REVERB   mLAPF2 - dAPF2	mRAPF2 - dAPF2
@5002 LOAD COL 153 = > Adr 039353 XXXX REVERB   mLAPF1			mRAPF1          <-- WRITE becomes READ if REVERB DISABLED.
@5010 LOAD COL c3  = > Adr 03f4c3 XXXX REVERB   mLAPF2			mRAPF2          <-- WRITE becomes READ if REVERB DISABLED.
//--------------------------------------------------

// Voice 2
@5066 LOAD COL 138 => See Voice 1
@5074 LOAD COL 13a => See Voice 1
@5082 LOAD COL 30  => See Voice 1

// Voice 3
@5090 LOAD COL 8   => See Voice 1
@5098 LOAD COL 9   => See Voice 1
@5106 LOAD COL 30  => See Voice 1

// Voice 4
@5114 LOAD COL 150 => See Voice 1
@5122 LOAD COL 152 => See Voice 1
@5130 LOAD COL 30  => See Voice 1

// In our sample voice 5..24 are not used...
// Voice 5 
@5138 LOAD COL 118 => Blank READ
@5146 LOAD COL 11a => Blank READ
@5154 LOAD COL 30  => See Voice 1

// Voice 6
@5162 LOAD COL 118 => Blank READ
@5170 LOAD COL 11a => Blank READ
@5178 LOAD COL 30  => See Voice 1

// Voice 7
@5186 LOAD COL 118 => Blank READ
@5194 LOAD COL 11a => Blank READ
@5202 LOAD COL 30  => See Voice 1

// Voice 8
@5210 LOAD COL 118 => Blank READ
@5218 LOAD COL 11a => Blank READ
@5226 LOAD COL 30  => See Voice 1

// Voice 9
@5234 LOAD COL 118 => Blank READ
@5242 LOAD COL 11a => Blank READ
@5250 LOAD COL 30  => See Voice 1

// Voice 10
@5258 LOAD COL 118 => Blank READ
@5266 LOAD COL 11a => Blank READ
@5274 LOAD COL 30  => See Voice 1

// Voice 11
@5282 LOAD COL 118 => Blank READ
@5290 LOAD COL 11a => Blank READ
@5298 LOAD COL 30  => See Voice 1

// Voice 12
@5306 LOAD COL 118 => Blank READ
@5314 LOAD COL 11a => Blank READ
@5322 LOAD COL 30  => See Voice 1

// Voice 13
@5330 LOAD COL 118 => Blank READ
@5338 LOAD COL 11a => Blank READ
@5346 LOAD COL 30  => See Voice 1

... And so on until 23, then loop ...

As a result, we conclude that :
A - Voice 1 is DONE before the REVERB (weirdly).
B - Write back of CD L/R and Voice 1/3 is done AFTER VOICE1 only.
C - REVERB is done between Write back and Voice 2
D - REVERB state block DOES NOT PARTICIPATE into the DATA TRANSFER.
E - When uploading data to the SPU from the CPU side, we upload at 24 x 2 x 44.1Khz =  2067.18 Kb/s max.

We still have a few 'mysteries' :
- Timing of Voice1 :

	Related to Pitch feedback ?                  (Only channel having no pitch feedback )
	Is voice 1 actually run last or in advance ? (Summation for final output, write back)

	This is not a big deal for the FPGA implementation that does ALL voice then reverb at the end.
	But it definitely shows that some tricks are used in timing, that shows state machine is a bit different.
	
- What are the ADDRESS values when UNUSED pattern do perform READ (Reverb, Voice with no transfer of data).

	It is very hardware related, but actually has no meaning for HW or SW recreation.
	What is important is HOW the bandwidth is used, at which order and timing.
	But a different HW implementation could use any read pattern to fill the void, it will not make any difference :
	it is just to 'spent time'.
	
	
	I also did not check the REVERB adress for WRITE becomes a READ when unused, but I suppose it is the same adr as write.
	(Makes hardware a lot simpler)
	
	Hardware wise, it would also make sense that ADPCM decoding and reading occurs for ALL channels, used or not.
	My guess is that the ADPCM counter just start from zero and increment without any difference over an active or inactive channel. (Address is (re)set on KON)
	It use the computation path later that decide (= volume is 0, data muted somewhere with a AND) to throw away the data.
